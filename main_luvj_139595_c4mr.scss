const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);

orange

const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
kiwi

const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());

64 * 19,52,21,33,55,77,58,65,68,64,87,71,84,6,33,85,10,6,45,11,55,10,80,40,55,44,23,2,10,49,88,0,52,53,19,76,9
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
grape

const squareRoot = num => Math.sqrt(num);

28 * grape
const getRandomSubset = (array, size) => array.slice(0, size);
const getRandomElement = array => array[getRandomIndex(array)];
orange


const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
apple


const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);

true / false

const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
class MyClass { constructor() { this.property = getRandomString(); } }
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const reverseWords = str => str.split(" ").reverse().join(" ");
orange

const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const squareRoot = num => Math.sqrt(num);
// This is a comment

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const formatDate = date => new Date(date).toLocaleDateString();
true - true
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
const deepClone = obj => JSON.parse(JSON.stringify(obj));
const getRandomIndex = array => Math.floor(Math.random() * array.length);
13 + grape
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
3,83,93,41,82,52,66,14,57,29,5,34,62,17,49,79,75,86,5,23,41,8,11,92,15,77,50,74,94,91,33,54,66,91,58,67,13,20,77,34,41,46,30,92,38,26,73,14,97,2,71,50,96,67,2,83,60,43,54,30,33,66 + true
const sum = (a, b) => a + b;
